From 93eebaa3dcbde6e867586a6ce7836d2f871a1fb9 Mon Sep 17 00:00:00 2001
From: ycc738 <ycc738@andestech.com>
Date: Thu, 23 Oct 2025 16:54:30 +0800
Subject: [PATCH 3/3] use CUSTOM OPCODE3 for this xstar extension

---
 clang/include/clang/Basic/riscv_vector.td     |  3 +--
 llvm/include/llvm/IR/IntrinsicsRISCV.td       |  1 +
 llvm/lib/Target/RISCV/RISCVInstrInfoV.td      | 20 ++++++++++++++-----
 .../Target/RISCV/RISCVInstrInfoVPseudos.td    | 13 ++++++++++--
 4 files changed, 28 insertions(+), 9 deletions(-)

diff --git a/clang/include/clang/Basic/riscv_vector.td b/clang/include/clang/Basic/riscv_vector.td
index 62bb6cbb8..27d9c9f67 100644
--- a/clang/include/clang/Basic/riscv_vector.td
+++ b/clang/include/clang/Basic/riscv_vector.td
@@ -1692,8 +1692,7 @@ defm vwmulsu : RVVOutOp0Op1BuiltinSet<"vwmulsu", "csi",
                                       [["vv", "w", "wvUv"],
                                        ["vx", "w", "wvUe"]]>;
 defm vwcmul : RVVOutOp0Op1BuiltinSet<"vwcmul", "csi",
-                                     [["vv", "w", "wvv"],
-                                      ["vx", "w", "wve"]]>;
+                                     [["vv", "w", "wvv"]]>;
 }
 
 // 12.13. Vector Single-Width Integer Multiply-Add Instructions
diff --git a/llvm/include/llvm/IR/IntrinsicsRISCV.td b/llvm/include/llvm/IR/IntrinsicsRISCV.td
index c01c5b44a..2a63c1f63 100644
--- a/llvm/include/llvm/IR/IntrinsicsRISCV.td
+++ b/llvm/include/llvm/IR/IntrinsicsRISCV.td
@@ -1412,6 +1412,7 @@ let TargetPrefix = "riscv" in {
   defm vsra : RISCVBinaryAAShift;
 
   defm vrotate : RISCVBinaryAAShift;
+  // defm vrotate_rot90 : RISCVUnaryAA;
 
   defm vnsrl : RISCVBinaryABShift;
   defm vnsra : RISCVBinaryABShift;
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfoV.td b/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
index 1f7abdcd7..32637e66d 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
@@ -799,10 +799,12 @@ multiclass VSHT_IV_V_X_I<string opcodestr, bits<6> funct6> {
 multiclass VCROTATE_IV_X_I<string opcodestr, bits<6> funct6> {
   def X  : VALUVX<funct6, OPIVX, opcodestr # ".vx">,
            Sched<[WriteVShiftX_WorstCase, ReadVShiftV_WorstCase,
-                  ReadVShiftX_WorstCase, ReadVMask]>;
+                  ReadVShiftX_WorstCase, ReadVMask]>
+          { let Inst{6-0} = OPC_CUSTOM_3.Value; }
   def I  : VALUVI<funct6, opcodestr # ".vi", uimm5>,
            Sched<[WriteVShiftI_WorstCase, ReadVShiftV_WorstCase,
-                  ReadVMask]>;
+                  ReadVMask]>
+          { let Inst{6-0} = OPC_CUSTOM_3.Value; }
 }
 
 multiclass VNSHT_IV_V_X_I<string opcodestr, bits<6> funct6> {
@@ -1163,8 +1165,6 @@ def : InstAlias<"vnot.v $vd, $vs",
 defm VSLL_V : VSHT_IV_V_X_I<"vsll", 0b100101>;
 defm VSRL_V : VSHT_IV_V_X_I<"vsrl", 0b101000>;
 defm VSRA_V : VSHT_IV_V_X_I<"vsra", 0b101001>;
-// Vector Rotate Instruction
-defm VROTATE_V : VCROTATE_IV_X_I<"vrotate", 0b111110>;
 
 // Vector Narrowing Integer Right Shift Instructions
 // Refer to 11.3. Narrowing Vector Arithmetic Instructions
@@ -1270,7 +1270,6 @@ let Constraints = "@earlyclobber $vd", RVVConstraint = WidenV in {
 defm VWMUL_V : VWMUL_MV_V_X<"vwmul", 0b111011>;
 defm VWMULU_V : VWMUL_MV_V_X<"vwmulu", 0b111000>;
 defm VWMULSU_V : VWMUL_MV_V_X<"vwmulsu", 0b111010>;
-defm VWCMUL_V : VWMUL_MV_V_X<"vwcmul", 0b111001>;
 } // Constraints = "@earlyclobber $vd", RVVConstraint = WidenV
 
 // Vector Single-Width Integer Multiply-Add Instructions
@@ -1333,6 +1332,17 @@ defm VNCLIP_W : VNCLP_IV_V_X_I<"vnclip", 0b101111>;
 } // Constraints = "@earlyclobber $vd"
 } // Predicates = [HasVInstructions]
 
+let Predicates = [HasVendorXStar, HasVInstructions] in {
+// Vector Rotate Instruction
+defm VROTATE_V : VCROTATE_IV_X_I<"vrotate", 0b111110>;
+
+let Constraints = "@earlyclobber $vd", RVVConstraint = WidenV in {
+def VWCMUL_VV : VALUVV<0b111001, OPMVV, "vwcmul.vv">, Sched<[]> {
+  let Inst{6-0} = OPC_CUSTOM_3.Value;
+}
+} // Constraints = "@earlyclobber $vd", RVVConstraint = WidenV
+} // Predicates = [HasVendorXStar, HasVInstructions]
+
 let Predicates = [HasVInstructionsAnyF] in {
 // Vector Single-Width Floating-Point Add/Subtract Instructions
 let Uses = [FRM], mayRaiseFPException = true in {
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td b/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
index 868ac1247..2d53c6898 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
@@ -2988,6 +2988,13 @@ multiclass VPseudoVWMUL_VV_VX {
   }
 }
 
+multiclass VPseudoVWCMUL_VV {
+  foreach m = MxListW in {
+    defvar mx = m.MX;
+    defm "" : VPseudoBinaryW_VV<m>, Sched<[]>;
+  }
+}
+
 multiclass VPseudoVWMUL_VV_VF_RM {
   foreach m = MxListFW in {
     defvar mx = m.MX;
@@ -6477,7 +6484,7 @@ defm PseudoVREM  : VPseudoVDIV_VV_VX;
 defm PseudoVWMUL   : VPseudoVWMUL_VV_VX;
 defm PseudoVWMULU  : VPseudoVWMUL_VV_VX;
 defm PseudoVWMULSU : VPseudoVWMUL_VV_VX;
-defm PseudoVWCMUL  : VPseudoVWMUL_VV_VX;
+defm PseudoVWCMUL  : VPseudoVWCMUL_VV;
 
 //===----------------------------------------------------------------------===//
 // 11.13. Vector Single-Width Integer Multiply-Add Instructions
@@ -7127,7 +7134,9 @@ defm : VPatBinaryV_VV_VX<"int_riscv_vrem", "PseudoVREM", AllIntegerVectors, isSE
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmul", "PseudoVWMUL", AllWidenableIntVectors>;
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmulu", "PseudoVWMULU", AllWidenableIntVectors>;
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmulsu", "PseudoVWMULSU", AllWidenableIntVectors>;
-defm : VPatBinaryW_VV_VX<"int_riscv_vwcmul", "PseudoVWCMUL", AllWidenableIntVectors>;
+
+// widening complex mul
+defm : VPatBinaryW_VV<"int_riscv_vwcmul", "PseudoVWCMUL", AllWidenableIntVectors>;
 
 //===----------------------------------------------------------------------===//
 // 11.13. Vector Single-Width Integer Multiply-Add Instructions
-- 
2.49.0

