From b6304f8da90fe462f0d4fce02e066f300ce99b14 Mon Sep 17 00:00:00 2001
From: ycc738 <ycc738@andestech.com>
Date: Tue, 21 Oct 2025 13:36:48 +0800
Subject: [PATCH 2/3] add vwcmul and vrotate instruction for complex number
 array

---
 clang/include/clang/Basic/riscv_vector.td     |  7 +++++++
 llvm/include/llvm/IR/IntrinsicsRISCV.td       |  3 +++
 llvm/lib/Target/RISCV/RISCVInstrInfoV.td      | 12 +++++++++++
 .../Target/RISCV/RISCVInstrInfoVPseudos.td    | 21 +++++++++++++++++++
 4 files changed, 43 insertions(+)

diff --git a/clang/include/clang/Basic/riscv_vector.td b/clang/include/clang/Basic/riscv_vector.td
index 6adc60031..62bb6cbb8 100644
--- a/clang/include/clang/Basic/riscv_vector.td
+++ b/clang/include/clang/Basic/riscv_vector.td
@@ -1631,6 +1631,10 @@ defm vsll : RVVShiftBuiltinSet;
 defm vsrl : RVVUnsignedShiftBuiltinSet;
 defm vsra : RVVSignedShiftBuiltinSet;
 
+// Vector Rotate Instruction (immediate only)
+defm vrotate : RVVOutOp1BuiltinSet<"vrotate", "csil",
+                           [["vx", "v", "vvz"]]>;
+
 // 12.7. Vector Narrowing Integer Right Shift Instructions
 defm vnsrl : RVVUnsignedNShiftBuiltinSet;
 defm vnsra : RVVSignedNShiftBuiltinSet;
@@ -1687,6 +1691,9 @@ defm vwmulu : RVVOutOp0Op1BuiltinSet<"vwmulu", "csi",
 defm vwmulsu : RVVOutOp0Op1BuiltinSet<"vwmulsu", "csi",
                                       [["vv", "w", "wvUv"],
                                        ["vx", "w", "wvUe"]]>;
+defm vwcmul : RVVOutOp0Op1BuiltinSet<"vwcmul", "csi",
+                                     [["vv", "w", "wvv"],
+                                      ["vx", "w", "wve"]]>;
 }
 
 // 12.13. Vector Single-Width Integer Multiply-Add Instructions
diff --git a/llvm/include/llvm/IR/IntrinsicsRISCV.td b/llvm/include/llvm/IR/IntrinsicsRISCV.td
index edd43acec..c01c5b44a 100644
--- a/llvm/include/llvm/IR/IntrinsicsRISCV.td
+++ b/llvm/include/llvm/IR/IntrinsicsRISCV.td
@@ -1411,6 +1411,8 @@ let TargetPrefix = "riscv" in {
   defm vsrl : RISCVBinaryAAShift;
   defm vsra : RISCVBinaryAAShift;
 
+  defm vrotate : RISCVBinaryAAShift;
+
   defm vnsrl : RISCVBinaryABShift;
   defm vnsra : RISCVBinaryABShift;
 
@@ -1443,6 +1445,7 @@ let TargetPrefix = "riscv" in {
   defm vwmul : RISCVBinaryABX;
   defm vwmulu : RISCVBinaryABX;
   defm vwmulsu : RISCVBinaryABX;
+  defm vwcmul : RISCVBinaryABX;
 
   defm vmacc : RISCVTernaryAAXA;
   defm vnmsac : RISCVTernaryAAXA;
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfoV.td b/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
index 6e5ee8043..1f7abdcd7 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfoV.td
@@ -796,6 +796,15 @@ multiclass VSHT_IV_V_X_I<string opcodestr, bits<6> funct6> {
                   ReadVMask]>;
 }
 
+multiclass VCROTATE_IV_X_I<string opcodestr, bits<6> funct6> {
+  def X  : VALUVX<funct6, OPIVX, opcodestr # ".vx">,
+           Sched<[WriteVShiftX_WorstCase, ReadVShiftV_WorstCase,
+                  ReadVShiftX_WorstCase, ReadVMask]>;
+  def I  : VALUVI<funct6, opcodestr # ".vi", uimm5>,
+           Sched<[WriteVShiftI_WorstCase, ReadVShiftV_WorstCase,
+                  ReadVMask]>;
+}
+
 multiclass VNSHT_IV_V_X_I<string opcodestr, bits<6> funct6> {
   def V  : VALUVV<funct6, OPIVV, opcodestr # ".wv">,
            Sched<[WriteVNShiftV_WorstCase, ReadVNShiftV_WorstCase,
@@ -1154,6 +1163,8 @@ def : InstAlias<"vnot.v $vd, $vs",
 defm VSLL_V : VSHT_IV_V_X_I<"vsll", 0b100101>;
 defm VSRL_V : VSHT_IV_V_X_I<"vsrl", 0b101000>;
 defm VSRA_V : VSHT_IV_V_X_I<"vsra", 0b101001>;
+// Vector Rotate Instruction
+defm VROTATE_V : VCROTATE_IV_X_I<"vrotate", 0b111110>;
 
 // Vector Narrowing Integer Right Shift Instructions
 // Refer to 11.3. Narrowing Vector Arithmetic Instructions
@@ -1259,6 +1270,7 @@ let Constraints = "@earlyclobber $vd", RVVConstraint = WidenV in {
 defm VWMUL_V : VWMUL_MV_V_X<"vwmul", 0b111011>;
 defm VWMULU_V : VWMUL_MV_V_X<"vwmulu", 0b111000>;
 defm VWMULSU_V : VWMUL_MV_V_X<"vwmulsu", 0b111010>;
+defm VWCMUL_V : VWMUL_MV_V_X<"vwcmul", 0b111001>;
 } // Constraints = "@earlyclobber $vd", RVVConstraint = WidenV
 
 // Vector Single-Width Integer Multiply-Add Instructions
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td b/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
index f8b7e32fe..868ac1247 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfoVPseudos.td
@@ -2603,6 +2603,21 @@ multiclass VPseudoVSHT_VV_VX_VI<Operand ImmType = simm5, string Constraint = "">
   }
 }
 
+multiclass VPseudoVCROTATE_VX_VI<Operand ImmType = simm5, string Constraint = ""> {
+  foreach m = MxList in {
+    defvar mx = m.MX;
+    defvar WriteVCRotateX_MX = !cast<SchedWrite>("WriteVShiftX_" # mx);
+    defvar WriteVCRotateI_MX = !cast<SchedWrite>("WriteVShiftI_" # mx);
+    defvar ReadVCRotateV_MX = !cast<SchedRead>("ReadVShiftV_" # mx);
+    defvar ReadVCRotateX_MX = !cast<SchedRead>("ReadVShiftX_" # mx);
+
+    defm "" : VPseudoBinaryV_VX<m, Constraint>,
+              Sched<[WriteVCRotateX_MX, ReadVCRotateV_MX, ReadVCRotateX_MX, ReadVMask]>;
+    defm "" : VPseudoBinaryV_VI<ImmType, m, Constraint>,
+              Sched<[WriteVCRotateI_MX, ReadVCRotateV_MX, ReadVMask]>;
+  }
+}
+
 multiclass VPseudoVSSHT_VV_VX_VI_RM<Operand ImmType = simm5, string Constraint = ""> {
   foreach m = MxList in {
     defvar mx = m.MX;
@@ -6410,6 +6425,9 @@ defm PseudoVXOR : VPseudoVALU_VV_VX_VI;
 defm PseudoVSLL : VPseudoVSHT_VV_VX_VI<uimm5>;
 defm PseudoVSRL : VPseudoVSHT_VV_VX_VI<uimm5>;
 defm PseudoVSRA : VPseudoVSHT_VV_VX_VI<uimm5>;
+// Vector Rotate Instruction (immediate only)
+defm PseudoVROTATE : VPseudoVCROTATE_VX_VI<uimm5>;
+
 
 //===----------------------------------------------------------------------===//
 // 11.7. Vector Narrowing Integer Right Shift Instructions
@@ -6459,6 +6477,7 @@ defm PseudoVREM  : VPseudoVDIV_VV_VX;
 defm PseudoVWMUL   : VPseudoVWMUL_VV_VX;
 defm PseudoVWMULU  : VPseudoVWMUL_VV_VX;
 defm PseudoVWMULSU : VPseudoVWMUL_VV_VX;
+defm PseudoVWCMUL  : VPseudoVWMUL_VV_VX;
 
 //===----------------------------------------------------------------------===//
 // 11.13. Vector Single-Width Integer Multiply-Add Instructions
@@ -6996,6 +7015,7 @@ defm : VPatBinaryV_VV_VX_VI<"int_riscv_vsrl", "PseudoVSRL", AllIntegerVectors,
                             uimm5>;
 defm : VPatBinaryV_VV_VX_VI<"int_riscv_vsra", "PseudoVSRA", AllIntegerVectors,
                             uimm5>;
+defm : VPatBinaryV_VX_VI<"int_riscv_vrotate", "PseudoVROTATE", AllIntegerVectors>;
 
 foreach vti = AllIntegerVectors in {
   // Emit shift by 1 as an add since it might be faster.
@@ -7107,6 +7127,7 @@ defm : VPatBinaryV_VV_VX<"int_riscv_vrem", "PseudoVREM", AllIntegerVectors, isSE
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmul", "PseudoVWMUL", AllWidenableIntVectors>;
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmulu", "PseudoVWMULU", AllWidenableIntVectors>;
 defm : VPatBinaryW_VV_VX<"int_riscv_vwmulsu", "PseudoVWMULSU", AllWidenableIntVectors>;
+defm : VPatBinaryW_VV_VX<"int_riscv_vwcmul", "PseudoVWCMUL", AllWidenableIntVectors>;
 
 //===----------------------------------------------------------------------===//
 // 11.13. Vector Single-Width Integer Multiply-Add Instructions
-- 
2.49.0

