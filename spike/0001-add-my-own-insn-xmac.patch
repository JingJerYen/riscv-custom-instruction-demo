From f19428bdf19b1d0d26c05b6b63e18d0558e750c6 Mon Sep 17 00:00:00 2001
From: ycc738 <ycc738@andestech.com>
Date: Thu, 10 Apr 2025 23:04:52 +0800
Subject: [PATCH 1/3] add my own insn xmac

---
 disasm/disasm.cc     | 4 ++++
 disasm/isa_parser.cc | 2 ++
 riscv/encoding.h     | 3 +++
 riscv/insns/xmac.h   | 6 ++++++
 riscv/isa_parser.h   | 1 +
 riscv/riscv.mk.in    | 1 +
 6 files changed, 17 insertions(+)
 create mode 100644 riscv/insns/xmac.h

diff --git a/disasm/disasm.cc b/disasm/disasm.cc
index 63fd12ac..c3c878f5 100644
--- a/disasm/disasm.cc
+++ b/disasm/disasm.cc
@@ -1986,6 +1986,10 @@ void disassembler_t::add_instructions(const isa_parser_t* isa, bool strict)
       DEFINE_RTYPE(mulw);
   }
 
+  if (ext_enabled(EXT_XSTAR)) {
+    DEFINE_RTYPE(xmac);
+  }
+
   if (ext_enabled(EXT_ZICBOM)) {
     DISASM_INSN("cbo.clean", cbo_clean, 0, {&base_only_address});
     DISASM_INSN("cbo.flush", cbo_flush, 0, {&base_only_address});
diff --git a/disasm/isa_parser.cc b/disasm/isa_parser.cc
index 4708b298..db0ba351 100644
--- a/disasm/isa_parser.cc
+++ b/disasm/isa_parser.cc
@@ -254,6 +254,8 @@ isa_parser_t::isa_parser_t(const char* str, const char *priv)
       extension_table[EXT_ZFA] = true;
     } else if (ext_str == "zicbom") {
       extension_table[EXT_ZICBOM] = true;
+    } else if (ext_str == "xstar") {
+      extension_table[EXT_XSTAR] = true;
     } else if (ext_str == "zicboz") {
       extension_table[EXT_ZICBOZ] = true;
     } else if (ext_str == "zicbop") {
diff --git a/riscv/encoding.h b/riscv/encoding.h
index bcc1ace2..7743f842 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -529,6 +529,8 @@
 /* Automatically generated by parse_opcodes. */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+#define MATCH_XMAC 0x0200007b
+#define MASK_XMAC 0xfe00707f
 #define MATCH_ADD 0x33
 #define MASK_ADD 0xfe00707f
 #define MATCH_ADD_UW 0x800003b
@@ -3042,6 +3044,7 @@
 #define INSN_FIELD_RS2_EQ_RS1 0x1f00000
 #endif
 #ifdef DECLARE_INSN
+DECLARE_INSN(xmac, MATCH_XMAC, MASK_XMAC)
 DECLARE_INSN(add, MATCH_ADD, MASK_ADD)
 DECLARE_INSN(add_uw, MATCH_ADD_UW, MASK_ADD_UW)
 DECLARE_INSN(addi, MATCH_ADDI, MASK_ADDI)
diff --git a/riscv/insns/xmac.h b/riscv/insns/xmac.h
new file mode 100644
index 00000000..e3d6ded9
--- /dev/null
+++ b/riscv/insns/xmac.h
@@ -0,0 +1,6 @@
+// riscv/insns/xmac.h
+
+require_extension(EXT_XSTAR);
+WRITE_RD(RD + (RS1 * RS2));
+
+
diff --git a/riscv/isa_parser.h b/riscv/isa_parser.h
index fae729ca..0e3740a3 100644
--- a/riscv/isa_parser.h
+++ b/riscv/isa_parser.h
@@ -87,6 +87,7 @@ typedef enum {
   EXT_SMMPM,
   EXT_SMNPM,
   EXT_SSNPM,
+  EXT_XSTAR,
   NUM_ISA_EXTENSIONS
 } isa_extension_t;
 
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 7fd98906..74009a1a 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -83,6 +83,7 @@ riscv_gen_hdrs = \
 
 
 riscv_insn_ext_i = \
+	xmac \
 	add \
 	addi \
 	addiw \
-- 
2.49.0

